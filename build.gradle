buildscript {
    ext {
        compose_version = '1.0.0-rc02'
        kotlin_version = '1.5.10'
        room = "2.4.0-alpha03"
        KAHelpers = '3.0.8'
        moshi = "1.12.0"
        daggerVersion = '2.38'
        hiltJetpackVersion = '1.0.0'
        retrofit = "2.9.0"
        accompanist = "0.14.0"
        lifecycle = '2.4.0-alpha02'
        composed = '0.0.10'
        paging_compose = '1.0.0-alpha11'
        paging_runtime = '3.0.0'
        navigation = '2.4.0-alpha04'
        constraint_layout = "1.0.0-alpha08"
        activity = "1.3.0-rc02"
        viewmodel_compose ="1.0.0-alpha07"
        navigation_compose ="1.0.0-alpha03"
        jsoup = "1.14.1"
        data_store = "1.0.0-rc01"
        coreKTX = "1.7.0-alpha01"
        crashy = "1.1.0"
        coil = "1.3.0"

        //compilation
        compileVersion = 30
        minVersion = 21

        //updatable
        verCode = 1
        verName = "1.0.0"

        testRunner = "androidx.test.runner.AndroidJUnitRunner"
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.0-alpha03'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$daggerVersion"

    }
}
task clean(type: Delete) {
    delete rootProject.buildDir
}

subprojects {

    switch (it.name) {
        case "app":
            apply plugin: 'com.android.application'
            apply plugin: 'kotlin-android'
            apply plugin: 'kotlin-kapt'
            apply plugin: 'dagger.hilt.android.plugin'
            applyAndroid(it, true, true)
            break

        //disable compose
        case ["strings", "colors", "drawables", "networking", "libgenapi", "toaster", "internetdetector", "bookdetailsdata",
              "bookdetailsdestination", "favoritebookdb", "favoritebookmodel",
              "latestbooksdata", "searchresultdata", "dispatchers", "appscope",
              "searchresultdestination", "searchdata", "settingsdata", "crashesdestination", "extensions"]:
            //setup gradle for libraries
            apply plugin: 'com.android.library'
            apply plugin: 'kotlin-android'
            applyAndroid(it, false, false)
            break

        //ignore parent folders
        case ["style", "resources", "retrofit", "bookdetails", "features", "favoritebook", "book", "components",
        "latestbooks", "searchresult", "sefarch", "settings", "coroutines", "crashes"]:
            break

        case ["serverconstants", "generalbook", "bookdetailsmodel", "bookmodel"]:
            apply plugin: 'java-library'
            apply plugin: 'kotlin'
            applyKotlinModule(it)
            break

        default:
            //setup gradle for libraries
            apply plugin: 'com.android.library'
            apply plugin: 'kotlin-android'
            applyAndroid(it, false, true)
            break
    }

}

def applyKotlinModule(project) {
    project.java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

def applyAndroid(project, buildConfigCase, enableCompose) {
    project.android {

        compileSdkVersion compileVersion

        defaultConfig {
            minSdkVersion minVersion
            targetSdkVersion compileVersion
            versionCode verCode
            versionName verName
            testInstrumentationRunner testRunner
        }

        compileOptions {
            sourceCompatibility = 1.8
            targetCompatibility = 1.8
        }

        kotlinOptions {
            jvmTarget = "1.8"
            useIR = true
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
            freeCompilerArgs += "-Xjvm-default=all"
        }

        testOptions.unitTests {
            includeAndroidResources = true
        }

        buildFeatures {
            compose enableCompose
        }

        if (enableCompose){
            composeOptions {
                kotlinCompilerExtensionVersion compose_version
            }
        }

        buildFeatures {
            aidl = false
            renderScript = false
            resValues = false
            shaders = false
            buildConfig = buildConfigCase
        }
    }

}


void applyRoomDeps(project) {
    project.dependencies {
        //room
        implementation "androidx.room:room-ktx:$room"
        kapt "androidx.room:room-compiler:$room"
    }
}

void applyDaggerDeps(project) {
    project.dependencies {
        //dagger
        implementation "com.google.dagger:dagger:$daggerVersion"
        kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    }
}

void applyHiltDeps(project) {
    project.dependencies {
        //hilt
        implementation "com.google.dagger:hilt-android:$daggerVersion"
        kapt "com.google.dagger:hilt-android-compiler:$daggerVersion"
    }
}

void applyComposeUIDeps(project) {
    project.dependencies {
        implementation "androidx.compose.ui:ui:$compose_version"
        implementation "androidx.compose.ui:ui-tooling:$compose_version"
    }
}

void applyMoshiDeps(project){
    project.dependencies{
        implementation "com.github.FunkyMuse.KAHelpers:moshi:$KAHelpers"
        kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi"
    }
}

void applyCoilDep(project){
    project.dependencies{
        implementation "io.coil-kt:coil-compose:$coil"
    }
}